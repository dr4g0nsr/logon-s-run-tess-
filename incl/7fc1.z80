
; "interruption"
; "système"
; "scroller*
; sys.conv_vram
; sprite

				
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;	INT   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@sys.int.im2_jp			ei
						push af,bc
inter.which_int				jp inter.line_00_2
inter.ends					ld (inter.which_int+1),bc	
inter.line_nook			pop bc,af
inter.return		ret
inter.line_00_2	ld b,#F5:in a,(c):rra:jr nc,inter.line_nook
					push de,hl:exx:ex af,af:push af,bc,de,hl,ix,iy
inter.vbl_only			jr inter.vbl_only_jr
							;
							ld bc,#BC01:out (c),c:inc b
sys.crtcreg1val				ld a,-1:out (c),a
							;	
							ld b,#7F
							ld hl,sys.7fc1.palette
							xor a:out (c),a:inc b:outi
							inc a:out (c),a:inc b:outi
							inc a:out (c),a:inc b:outi
							inc a:out (c),a:inc b:outi
inter.scroller_final_fix		call scroller.int1
							;
inter.line_06_6.gameboy_fix
							ld hl,inter.line_06_6:ld (inter.which_int+1),hl
inter.vbl_only_jr		ld bc,#7FC2:out (c),c
						call aks_regs
inter.line_00_2.zik		call aks_play
sys.nb_calls_at_VBL		ld hl,0
						ld a,h:or l:jr z,sys.nb_calls_at_VBL_KO
							dec hl:ld (sys.nb_calls_at_VBL+1),hl
sys.flag_VBL					ld a,0:inc a:ld (sys.flag_VBL+1),a
								cp 1
								if debug.flag_VBL
								jr z,2+$+2:break
								endif
								jr nz,sys.no_call_at_VBL
sys.call_at_VBL				call inter.return
								di:ld a,(sys.flag_VBL+1):dec a:ld (sys.flag_VBL+1),a:ei
								if debug.flag_VBL
								jr z,2+$+2:break
								endif
								jr nz,sys.call_at_VBL
								ld hl,(@sys.nb_calls_at_VBL+1):ld a,h:or l:jr nz,sys.no_call_at_VBL
sys.last_call_at_VBL				call inter.return
sys.no_call_at_VBL	
sys.nb_calls_at_VBL_KO
sys.7FC1_3 equ $+1 :ld bc,#7FC2:out (c),c
					pop iy,ix,hl,de,bc,af:ex af,af:exx:pop hl,de
				pop bc,af
sys_ret			ret
inter.line_00_2.final	
				ld bc,#BC04:out (c),c:ld bc,#BD10-5-3:out (c),c
				ld bc,#BC06:out (c),c:ld bc,#BD0D-5-3+1:out (c),c ; comme 7, +1
inter.final_offset_top
				ld bc,#BC0C:out (c),c:ld bc,#BD00:out (c),c ;...
				ld bc,#BC0D:out (c),c:ld bc,#BD00:out (c),c
			ret
inter.line_06_6.final
				ld bc,#BC04:out (c),c:ld bc,#BD05:out (c),c
				ld bc,#BC0C:out (c),c:ld bc,#BD2F:out (c),c ; static = 8-BIT
				ld bc,#BC0D:out (c),c:ld bc,#BD00+256-48*3:out (c),c
				ld bc,#BC07:out (c),c:ld bc,#BDFF:out (c),c
				jr inter.line_13_2.gameboy_fix
inter.line_06_6.gameboy
				ld bc,#7F00+RGB201:xor a:out (c),a:out (c),c
 if cond.colorz=1
  ld a,#10
 else
				ld a,#03
 endif
					     out (c),a:ld c,RGB010:out (c),c
 if cond.colorz=1
  ld a,#1
 else
				xor a
 endif
				      out (c),a
inter.line_06_6	ld bc,#BC04:out(c),c
inter.line_06_6.reg4
				ld bc,#BD0A:out (c),c
scroller.int2_fix
				push de,hl:call scroller.int2:pop hl,de
inter.line_13_2.gameboy_fix
				ld bc,inter.line_13_2:jp inter.ends
inter.line_13_2.final
				ld bc,#BC04:out (c),c:ld bc,#BD14+3:out (c),c
				ld bc,#BC06:out (c),c:ld bc,#BD15+3:out (c),c
inter.final_offset_bottom
				ld bc,#BC0C:out (c),c:ld bc,#BD00:out (c),c ;...
				ld bc,#BC0D:out (c),c:ld bc,#BD00:out (c),c
				jr inter.line_19_6.gameboy_fix
inter.line_13_2.gameboy
				ld bc,#7F00+RGB200:out (c),c
				ld b,16+16+13:djnz $
				ld bc,#7F00+RGB202:out (c),c
inter.line_19_6.gameboy_fix
inter.line_13_2	ld bc,inter.line_19_6:jp inter.ends
inter.line_19_6.gameboy
				ld bc,#7F00+RGB100
 if cond.colorz=1
 ld a,#10
 else
   							       ld a,#03
 endif
				                            out (c),a:out (c),c
scroller.int3_fix
inter.line_19_6	push de,hl:call scroller.int3:pop hl,de
inter.line_19_6.final
inter.line_26_2.gameboy_fix
				ld bc,inter.line_26_2
inter.line_26_2.gameboy_logo_fix
				jp inter.ends
inter.line_26_2.gameboy
				ld bc,#7F00+RGB002
 if cond.colorz=1
  ld a,#1
 else
				xor a
 endif
				out (c),a:out (c),c
inter.line_32_6.gameboy_fix
inter.line_26_2.final
inter.line_26_2	ld bc,inter.line_32_6:jp inter.ends				
inter.line_32_6.final
				ld bc,#BC07:out (c),c:ld bc,#BD0D-5-3:out (c),c
				ld bc,#7F03:out (c),c:ld a,#52:out (c),a
				jr inter.line_32_6_go_on
inter.line_32_6	ld bc,#BC04:out(c),c
inter.line_32_6.reg4
				ld bc,#BD10:out (c),c
inter.line_32_6.gameboy.fix_scroll_r2
				jr inter.line_32_6_go_on
				ld b,10+16*13:djnz $
				ld bc,#BC00:out (c),c:	ld bc,#BD3F-1:out (c),c
				ld b,#30/4-4*0:djnz $ ; 4 pour ligne préc.
										ld bc,#BD3F:out(c),c ; reg0 décalé
				ld bc,#BC02:out (c),c:inc b
				ld a,#32-8:inc a:ld ($-2),a:out (c),a
inter.line_32_6_go_on
				ld bc,inter.line_00_2:jp inter.ends	
inter.line_32_6_zik	ld (inter.which_int+1),bc
					push de,hl:exx:ex af,af:push af,bc,de,hl,ix,iy
					ld bc,#7FC2:out (c),c
					call aks_play
					jp sys.nb_calls_at_VBL_KO
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
sys.7fc1.palette
sys.ink0val					db #44
sys.ink1val					db #5C
							if cond.colorz
sys.ink2val					db #4B
sys.ink3val					db #4B
							else
sys.ink2val					db #44
sys.ink3val					db #5C
							endif
							
							
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;	SYS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
sys.copy_1000	ld a,ixh:call sys.set_7FCx
				ld d,#D0:ld b,#10:ldir
				ld a,ixl:call sys.set_7FCx
				ld b,#10:ld a,h:sub b:ld d,a:ld h,#D0:ldir
				jr sys.set_7FC2
sys.copy_7FCx	push bc ; sans doute inutile /!\ à voir vers letitbig
				call sys.set_7FCx
				pop bc:ldir
				jr sys.set_7FC2
sys.fill_xxxx	call sys.set_7FCx ; remplit avec E pendant D*#100
				ld (hl),e:ld b,d:ld c,0:dec bc:ld de,hl:inc de:ldir
sys.set_7FC2	ld a,#C2
sys.set_7FCx	ld b,#7F:ld (sys.7FC1_3),a:out (c),a:ret
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
sys.7FC1_3.backup	ld a,(sys.7FC1_3):ld (sys.7FC1_3.restore+1),a:ret
sys.7FC1_3.restore	ld a,#C2:ld (sys.7FC1_3),a:ret
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
sys.wait_int_vbl_is_over 		ld b,1
sys.wait_int_vbl_is_over_djnz	ld a,low inter.line_06_6
sys.wait_int_vbl_is_over_loop
sys.wait_int						ld hl,inter.which_int+1
									cp (hl):jr z,$-1 ; si on est déjà en train de l'attendre, c'est que çà va trop vite
									cp (hl):jr nz,$-1
								djnz sys.wait_int_vbl_is_over_loop	
							ret	


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;	SCROLLER   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
rot.adr_to_tab_7Fadrcrtc dw rot.tab_7Fadrcrtc
rot.tab_7Fadrcrtc 		db #C1,#00
				 		db #C1,#40
				 		db #C1,#80
rot.tab_7Fadrcrtc_C000	db #C3,#40
				 		db #C1,#00 ; if it cycles to next bank
				 		db #C1,#40 ; if it cycles during the addx/y
				 		db #C1,#80 ; during init
				 		
rot.tab_7Fadrcrtc_16kb	defs 12,0	
;  						db #C1,#40
;  				 		db #C1,#40
;  						db #C1,#40
;  				 		db #C1,#40 ; if it cycles to next bank
;  				 		db #C1,#40 ; if it cycles during the addx/y
;  				 		db #C1,#40 ; during init
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
scroller.add_hl_de
		ld bc,#1033:add hl,de:bit 2,h:ld a,h:jr z,2+$+1:add a,b:and c:ld h,a:ret
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
scroller.int1	ld hl,0
				push hl
scroller.inc_split	ld de,0
					call scroller.add_hl_de:ld (scroller.int2+1),hl
					call scroller.add_hl_de:ld (scroller.int3+1),hl
				pop hl
scroller.out_hl
				ld bc,#BC0C
				out (c),c
				inc b
scroller.crtc_16kb_fix ld a,h:and #FF: or #0C; #FF et #0C == overscan  /// #03 et #00/10/20/30 == 16kb cyclique non overscan
				out (c),a
				dec b
				inc c
				out (c),c
				inc b
				out (c),l
			ret
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
scroller.int2		ld hl,0:jr scroller.out_hl
scroller.int3		ld hl,0:call scroller.out_hl
scroller.inc_offset	ret
					ld hl,(scroller.int1+1)
scroller.inc_scr	ld de,0 ;test.scroller.scr_width*test.scroller.scr_height <---- do * hauteur de la frame
					call scroller.add_hl_de
					ld (scroller.int1+1),hl
				ret
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
scroller.set_scr	ld (scroller.inc_scr+1),hl
					ld (scroller.inc_split+1),de
					ld (scroller.int1+1),bc
				ret 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
scroller.int_fixed_call	ld (scroller.crtc_16kb_fix+4),a
						call scroller.out_hl
						jr scroller.add_hl_de
scroller.int2_fixed		ld a,(scroller.crtc_16kb_fix+4):ld (scroller.int1_backup+1),a
scroller.int2_fixed.scr	ld hl,48
scroller.int2_fixed.ads	ld de,1024-48*6 ; mario
scroller.int2_fixed.r12	ld a,#10:call scroller.int_fixed_call:ld (scroller.int2_fixed.scr+1),hl
						ret
scroller.int3_fixed		
scroller.int3_fixed.scr	ld hl,0
scroller.int3_fixed.ads	ld de,1024-48*2 ; rubber
scroller.int3_fixed.r12	ld a,#00:call scroller.int_fixed_call:ld (scroller.int3_fixed.scr+1),hl
scroller.int1_backup	ld a,0:ld (scroller.crtc_16kb_fix+4),a				
						jr scroller.inc_offset				
						
									
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;	SPRITE   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
sprite.7FCx.put
				ld a,(iy+0):call sys.set_7FCx
				call sprite.put
				jp sys.set_7FC2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
sprite.nextbank		exx
					ld a,(iy+2)
					ld b,#7F
					ld (sys.7FC1_3),a
					out (c),a 		; bank suivante
					exx
					ld a,d
					sub 8			; -#800 déjà
					sub (iy+1)		; -bank en cours
					add a,(iy+3)	; +bank prochaine
					ld d,a
					ret
sprite.prevbank		exx
					ld a,(iy+0)
					ld b,#7F
					ld (sys.7FC1_3),a
					out (c),a 		; bank suivante
					exx
					ld a,d
					add a,8			; +#800 déjà
					sub (iy+3)		; -bank prochaine
					add a,(iy+1)	; +bank en cours
					ld d,a
					ret
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
sprite.put		
			if debug.sprite_ready
				break
			endif
					ld bc,hl
sprite.height1 		ld ixl,0
sprite.charactere.loop
sprite.width1			ld ixh,0
						ld h,high @rot.tab.mask
						ld a,d:inc a:and 7
sprite.ligne.faster.jp1	jp nz,0 ;sprite.unroll
						ld a,e
sprite.width2			add a,0
sprite.ligne.faster.jp2	jp nc,0 ;sprite.unroll
						jr sprite.ligne.entry
sprite.ligne.loop			ld a,d
							inc de
							xor d
							bit 3,a
							call nz,sprite.nextbank
sprite.unroll.once			inc c		; sprite sans soucis de poids fort
sprite.ligne.entry			ld a,(bc)	; récupère octet à poker
							ld l,a		; avec h = high tab.mask
							ld a,(de) 	; récupère octet de l'écran à masquer
sprite.ligne.fix.andor		and (hl)	; masque appliqué
							or l 		; octet non masqué
							ld (de),a 	; vers adresse écran
							xor a		;
							ld (bc),a 	; vide le buffer... (a pas envie de chercher plus rapide)
						dec ixh:jr nz,sprite.ligne.loop		
					dec ixl:ret z
sprite.width5		ld hl,-31
					add hl,de 			; -largeur
					ld a,d
					xor h
					bit 3,a
					ex de,hl
					call nz,sprite.prevbank
					ld hl,#800
sprite.ligne.loop.shunt
					ld a,0
					add a,c:ld c,a:jr nc,2+$+1:inc b
					add hl,de 			; +prochaine ligne dans le caractère
					ld a,d
					xor h
					ex de,hl
					bit 6,a				; prochaine ligne de caractère?
					jp z,sprite.charactere.loop	
sprite.ligne.loop.shunt_for_real
sprite.scr_width1	ld hl,-#4000+#50
						add hl,de			;  7lignes
						ld a,d
						xor h
						ex de,hl
						bit 3,a				; prochaine bank?
						jp z,sprite.charactere.loop
							call sprite.nextbank
							jp sprite.charactere.loop
			
					