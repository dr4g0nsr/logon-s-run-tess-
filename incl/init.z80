
; /!\ retro chronologiquement car écrasable (!)


; >>>init_intro <<< F3/search là-dessus, avec l'espace final
; @tess.init initialise les tables
; (puis y'a l'init de l'aks)

			
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
init_intro.bar_end
			call sys.7FC1_3.backup ; parce que sous interruption
			ld a,#C3:call sys.set_7FCx
		; keep only ink3
			ld hl,#5C5C:ld (sys.ink1val),hl
			call sys.wait_int_vbl_is_over 
		;
			ld d,%00001111
			ld hl,#4000;call init_intro.bar_end.loop		
init_intro.bar_end.loop
			ld a,(hl):and d:ld e,a:add a,a:add a,a:add a,a:add a,a:or e:ld (hl),a
			inc l:jr nz,init_intro.bar_end.loop
			ld a,h:add a,8:ld h,a:and %111000:jr nz,init_intro.bar_end.loop	
		;
			jp sys.7FC1_3.restore ; parce que sous interruption
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
init_intro.bar_call
		; 
init_intro.bar_call_cpt
			ld hl,#FFFF
			ld de,#10000*(40*8)/(timing_init_intro_bar-timing_init_intro_bar_y)
			add hl,de
			ld (init_intro.bar_call_cpt+1),hl
			ret nc	
		; plot : pas sous int mais attention au 7FC3!!!
			ld bc,#7FC3:out (c),c
init_intro.bar_call_hl
			ld hl,#5000+8-1
init_intro.bar_call_a
			ld a,%00010000
			rrca
			cp %00001000:jr nz,2+$+3
				inc hl:ld a,%10000000
			ld (init_intro.bar_call_hl+1),hl
			ld (init_intro.bar_call_a+1),a
			ld c,a
			ld b,#80:call init_intro.bar_call_loop
			ld de,#10000-#4000+60*2:add hl,de
			ld b,#70
init_intro.bar_call_loop
			ld a,(hl):xor c:ld (hl),a:ld a,h:add a,8:ld h,a:cp b:jr nz,init_intro.bar_call_loop
			ret
dollar.end_init.sprite_unroll equ $
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
			if obsolete.logostart
init_intro.bar_init_f
			call init_intro.bar_start.xor_gfx_start
			ld bc,#7FC2:out (c),c ; car on est en 7FC3! :D
			ld hl,init_intro.bar_call
			ld de,init_intro.bar_end
			ld bc,timing_init_intro_bar_f
			jp sys.put_call_at_VBL
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
init_intro.bar_init_t
			call init_intro.bar_start.xor_gfx_start
			ld bc,#7FC2:out (c),c ; car on est en 7FC3! :D
			ld hl,init_intro.bar_call
			ld de,init_intro.bar_init_f
			ld bc,timing_init_intro_bar-timing_init_intro_bar_y-timing_init_intro_bar_t-timing_init_intro_bar_f
			jp sys.put_call_at_VBL
init_intro.bar_start.xor_gfx_start
			ld bc,#7FC3:out (c),c
		; recopie le sprite/gfx at start
			ld de,init.gfx_start
			ld hl,offset_logo_at_start
			ld ixh,32
init_intro.bar_start.loop0	ld b,7
init_intro.bar_start.loop1		ld a,(de):and %11110000:xor (hl):ld (hl),a:inc hl
								ld a,(de):add a,a:add a,a:add a,a:add a,a:xor (hl):ld (hl),a:inc hl:inc de
								djnz init_intro.bar_start.loop1
							ld bc,#800-14:add hl,bc
							bit 6,h:jr z,2+$+4
								ld bc,#C000+60*2:add hl,bc
							dec ixh:jr nz,init_intro.bar_start.loop0
			ret					
			endif
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
init_intro.bar_init
			ld a,#C9:ld (scroller.inc_offset),a
			ld bc,#7FC2:out (c),c ; car on est en 7FC3! :D
			if obsolete.logostart
			ld hl,init_intro.bar_call
			ld de,init_intro.bar_init_t
			ld bc,timing_init_intro_bar_t
			else
			ld hl,init_intro.bar_call
			ld de,init_intro.bar_end
			ld bc,timing_init_intro_bar-timing_init_intro_bar_y
			endif
			jp sys.put_call_at_VBL
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
init_intro.bar_start
			call sys.7FC1_3.backup ; parce que sous interruption
		;
			ld a,#5C:ld (sys.ink0val),a:ld bc,#7F00:out (c),c:out (c),a
			ld a,#C9:ld (scroller.inc_offset),a
		; efface l'écran
			if obsolete.colstart
			ld hl,#4000:ld a,#C3:ld de,#4000+%00000000:call sys.fill_xxxx
			endif
			ld hl,#5C5C:ld (sys.ink1val),hl
			ld bc,#7F8D:out (c),c ; mode 1
		; prepare l'écran
			ld a,60:ld (sys.crtcreg1val+1),a
			ld hl,#3400-60:ld de,60*11:ld bc,#3000+2*60
				call scroller.set_scr 
		; dessine l'encadrement de la loading bar
			ld a,#C3:call sys.set_7FCx
			ld a,%11110000
			ld de,%0011000011000000
			ld hl,#4000+#800*0+7:call init_intro.bar_draw1
			ld hl,#4000+#800*7+7+60*2:call init_intro.bar_draw1
			ld de,%0010000000001000
			ld hl,#4000+7     :call init_intro.bar_draw2
			ld hl,#4000+7+60*2:call init_intro.bar_draw2
			ld d,%01000000
			ld hl,#4000+7+40*2+1     :call init_intro.bar_draw2
			ld hl,#4000+7+40*2+1+60*2:call init_intro.bar_draw2
		; c'est parti!
			ld hl,#5A5A:ld (sys.ink1val),hl
			call sys.set_7FC2
			xor a:ld (scroller.inc_offset),a
			;ld hl,init_intro.bar_call
			ld de,init_intro.bar_init
			ld bc,timing_init_intro_bar_y
			call sys.put_call_at_VBL_wo_call
		;			
			jp sys.7FC1_3.restore ; parce que sous interruption
init_intro.bar_draw1 ld (hl),d:inc l:ld b,80:ld (hl),a:inc l:djnz $-2:ld (hl),e:ret
init_intro.bar_draw2 ld b,8:ld a,(hl):or d:ld (hl),a:ld a,h:add a,e:ld h,a:djnz init_intro.bar_draw2+2:ret
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
init_intro.activate_splitscreens
			;if debug.syncbreak
			;break ; comme çà génére des trucs  il faut que la partie de code avant #E200 soit déjà passée; cf @rot.reset.size_spr.gen_tab_shift
			; faire display de $ pour confirmer
			;endif
		; last set before switching to interruption with splited screens					
		;
 			ld b,#F5:in a,(c):rra:jr c,$-3:in a,(c):rra:jr nc,$-3
 			;di
 				ld bc,#BC04:out(c),c:ld bc,#BD10:out (c),c
				;ld bc,#7F8D:out(c),c ; NO since mode 2 required 
	 			xor a:ld (inter.vbl_only+1),a
	 			ld b,#7F:ld hl,#1054:out (c),h:out (c),l ; ajout tardif, pas de border remis sous INT
	 			;break		
	 		;ei	
	 		; interrruption is 2 scanlines after VSYNC
	 		;
			xor a:ld (scroller.inc_offset),a
			if obsolete.colstart
 			ld de,init_intro.bar_start
 			ld bc,114+3
			jp sys.put_call_at_VBL_wo_call	
			else
			jp init_intro.bar_start
			endif
			
dollar.init_intro.activate_splitscreens
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; synchro at start
init_intro.resize_crtc_and_blue_screen
	; synchro from basic screen to splited screens, mode 2, 00=01=border -> blue #44
			ld b,#F5:in a,(c):rra:jr c,$-3:in a,(c):rra:jr nc,$-3
		; set reg 2 accordingly
			ld b,#bc
			ld hl,#003B
			out (c),h:inc b:out (c),l
				; inks cos' we get time
				ld bc,#7F8E:out (c),c
				ld hl,#0044:out (c),h:out (c),l
				      inc h:out (c),h:out (c),l
				ld h ,#10  :out (c),h:out (c),l
			; going on with crtc reg 2
			ld de,#0232
			ld hl,#060C
			ld bc,#BD3F    :out (c),c:dec b
			out (c),d:inc b:out (c),e:dec b
		; halt
			halt
		; set reg 6
			out (c),h:inc b:out (c),l:dec b
		; check asic or pre-asic
			ld de,#0C30
			out (c),d:inc b:out (c),e
			inc b:in a,(c):cp e
			jr nz,init_intro.no_change_on_R3
				; asic or pre-asic
				ld bc,#BC03:out (c),c
				ld bc,#BD00+crtc_reg3-1:out (c),c
init_intro.no_change_on_R3			
			ld b,#BC
		; set reg 7 / part 1
			ld de,#0437
			out (c),d:inc b:out (c),e
			; waiting...
			halt:halt:halt:halt:halt
		; set reg 7 / part 2
			ld a,#26:       out (c),a:dec b
			ld de,#070D
			out (c),d:inc b:out (c),e;:dec b
		; prépare l'écran en #C000
			call sys.7FC1_3.backup ; parce que sous interruption
			call init_intro.columns_init
		; plus tard: l'écran splitté sous interruption
 			call sys.set_7FC2
 			ld de,init_intro.activate_splitscreens
 			ld bc,timing_init_intro_blue
				call sys.put_call_at_VBL_wo_call	
		jp sys.7FC1_3.restore ; parce que sous interruption
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

init_intro.columns_init
			ld a,#C3:call sys.set_7FCx
			ld hl,#4000:
			if obsolete.colstart
			xor a:ld b,48*2:ld (hl),a:inc hl:djnz $-2
			ld e,%00000001
			ld c,113-4
			ld d,0
init_intro.columns_init.jr1
				ld a,114-4:sub c:ld b,a
				ld a,-1:call init_intro.columns_init.loop
				ld b,c
				xor a:call init_intro.columns_init.loop
				dec c:jr nz,init_intro.columns_init.jr1
			; remplit la fin
			ld a,-1:ld (hl),a:inc hl:bit 3,h:jr z,$-4
			; recopie sur les 8 scanlines
			ld hl,#4000:ld de,#4800:ld bc,#3800:ldir
		ret
init_intro.columns_init.loop
			rrca ; cycle sur a pour avoir 0 ou 1
			rl d; slide sur d avec ce carry	
			rlc e; cycle sur e pour voir si carry au 8ème 
			jr nc,2+$+2
				ld (hl),d:inc hl
			djnz init_intro.columns_init.loop
			else
			ld de,#4001:ld bc,#3FFF:ld (hl),0:ldir
			endif
			ret
				
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

init_intro 
			
	; entrée supposé en 7FC1 ou 7FC3 (rappel)
			;ld sp,sys.stack ; == #7F80 déjà setté
			;di

	; CRTC standard (sans toucher à l'adresse écran supposée en #C000)
		; frame
			ld b,#F5:in a,(c):rra:jr nc,$-3
		; crtc				
			ld hl,crtc_std_tab:ld b,#BC:xor a
crtc_loop		out (c),a:inc b
				ld c,(hl):out (c),c:dec b
				inc hl:inc a:cp 10
				jr nz,crtc_loop
		; on passe en 7FC2
			ld bc,#7FC2:out (c),c	
		; init 
			call @tess.init
			;;;call sprite.switch_to_sprite
			
		; screen
			ld a,-1:ld (sys.crtcreg1val+1),a
			ld hl,7:ld de,0:ld bc,#3000:call scroller.set_scr
			
		; prépare les synchros d'effacement de couleurs etc
 	 		ld de,init_intro.resize_crtc_and_blue_screen
 			ld bc,timing_init_intro_basic
				call sys.put_call_at_VBL_wo_call
							
		; music maestro please!
			ld b,#F5:in a,(c):rra:jr nc,$-3
			ei ; now music is called

		; vide tout sauf l'écran en #C000
			ld a,#C1:call sys.set_7FCx
			ld hl,#0000:ld (hl),0:ld de,#0001:ld bc,#DFFF:ldir
			
		; now go to 7FC2, start for true	
			call sys.set_7FC2
		jp main_entry_7FC2

;;;dollar.end_init.sprite_unroll equ $				

crtc_std_tab   db #3F,#28,#2E,crtc_reg3,#26,0,#19,#1E,0,7 ; reg3 à D ???
;crtc_init_tab db #3f,#33,#32,#D,#26,0,#0C,#0D,0,7
;                      ..  !!           ..  !!		<-- then changed
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@tess.init			
	; zik
		ld de,#0000:call aks_init:call aks_play
		ld a,1:ld (aks_fix_adr),a ; aks_fix_val comme alternative
	; int IM2
		ld a,sys.int.im2_base
		ld i,a
		ld h,a : ld l,0 : ld e,1 : ld d,h
		ld a,sys.int.im2_byte : ld (hl),a     
		ld bc,257
		ldir
 		ld h,a: ld l,h
 		ld (hl),#C3 : inc hl
 		ld de,sys.int.im2_jp : ld (hl),e : inc hl : ld (hl),d
		im 2
	;
@sys.mul.init
		ld hl,sys.mul.tab
		ld bc,0   ; n=0
		ld de,0   ; n2=0
		xor a     ; ade = un seul registre 24 bit
		call sys.mul.init.loop
		inc h
		inc h
		call sys.mul.init.loop
	;
	; table to xor with current filling byte
@rot.init
		ld hl,rot.tab.xor_fill
		ld b,%00010001
@rot.init9	ld a,l:and b:ld c,a
			rlca:or c:rlca:or c:rlca:or c
			ld (hl),a
			inc l
			jr nz,@rot.init9
	;
	; table = mask
		ld hl,@rot.tab.mask:ld c,-1
@rot.init8	ld a,l
			rlca:rlca:rlca:rlca:or l:xor c
			ld (hl),a
			inc l
			jr nz,@rot.init8
	;
	; calculates array
	; input:  l is a byte taken from the screen to fill in mode 1
	; output: (hl) is the same byte, but filled
		ld hl,@rot.tab.fill
@rot.init7	ld b,10001000b 	; b == AND pour 1er pixel (puis 2nd 3eme 4eme)
				ld a,l ; l == l'octet lu a l ecran pour remplir
				and b ; on ne garde que le 1er pixel
				ld e,a ; e == pixel en cours
				ld d,a ; d == l'octet final qu'on commence a sauver
			rrc b ; 2nd pixel, b decale pour le AND
			rrc e ; 2nd pixel pour l'octet en cours
				ld a,l ; octet lu
				and b ; on ne garde que le 2nd pixel
				xor e ; xor avec le pixel precedent
				ld e,a ; nouveau pixel precedent pour le prochain passage
				or d ; on complete l'octet final
				ld d,a ; octet final sauve
			rrc b ; 3eme pixel, b decale pour le AND
			rrc e ; 3eme pixel pour l'octet en cours
				ld a,l ; octet lu
				and b ; on ne garde que le 3eme pixel
				xor e ; xor avec le pixel precedent
				ld e,a ; nouveau pixel precedent pour le prochain passage
				or d ; on complete l'octet final
				ld d,a ; octet final sauve
			rrc b ; 4eme pixel, b decale pour le AND
			rrc e ; 4eme pixel pour l'octet en cours
				ld a,l ; octet lu
				and b ; on ne garde que le 4eme pixel
				xor e ; xor avec le pixel precedent
				ld e,a ; nouveau pixel precedent pour le prochain passage
				or d ; on complete l'octet final
				; ld d,a ; octet final sauve
	ld e,l:ld d,a:ld a,l:rrca:rrca:rrca:rrca:ld l,a
			ld (hl),d ; enfin! on sauve l'octet dans la table
	ld l,e
			inc l:jr nz,rot.init7
	;
	ret
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@sys.mul.init.loop	
			push af
			push de   ; n...
			    srl a	
				rr d
				rr e
				srl a
				rr d
				rr e      ; ...divided by 4
				ld (hl),e
				inc h
				ld (hl),d
				dec h
			pop de
			pop af
			ex de,hl
				add hl,bc ; (n+1)2 = n2 + 2n ...
				jr nc,2+$+1:inc a
				inc bc
				add hl,bc ;                 ... +1
				jr nc,2+$+1:inc a
			ex de,hl
		inc l
		jr nz,@sys.mul.init.loop
		ret	

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
